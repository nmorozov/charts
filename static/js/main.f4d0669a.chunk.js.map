{"version":3,"sources":["types/coordinateType.js","store/constants/chart.js","types/chartDataType.js","store/actions/ChartActions.js","core/utils.js","components/Panel/Panel.jsx","components/Button/Button.jsx","components/Canvas/Drawer.js","components/Canvas/Canvas.jsx","containers/App/App.jsx","store/reducers/ChartReducer.js","store/index.js","serviceWorker.js","index.js"],"names":["shape","xCoordinate","number","yCoordinate","ADD_NEW_CHART","color","string","isRequired","coordinates","arrayOf","coordinateType","MOVE_CHART_TO_ANOTHER_CANVAS","MOVE_CHART","REMOVE_CHARTS","addNewChart","chartData","type","payload","moveChartToAnotherCanvas","fromCanvasIndex","toCanvasIndex","chartIndex","moveChart","canvasIndex","removeCharts","genetateUniqueCoordinates","length","set","Set","lengthRemained","args","rand","_","random","has","add","Array","from","generateChartDataInRange","xAxisMax","yAxisMax","count","i","Math","floor","generateRandomHexColor","uniqueXCoordinates","sort","a","b","uniqueYCoordinates","push","panel","children","className","button","handleButtonClick","text","onClick","defaultProps","Drawer","canvas","this","ctx","getContext","chartsData","forEach","strokeStyle","drawLines","drawDots","fillColor","coordinate","beginPath","arc","PI","fillStyle","fill","lineWidth","stroke","closePath","moveTo","lineTo","Canvas","dragMode","currentChart","chartWasMoved","initCanvas","drawer","props","clearCanvas","drawCharts","initDimensions","initEventListeners","width","document","documentElement","clientWidth","height","clientHeight","addEventListener","mouseEvent","pointGroupIndex","point","checkIfMouseInsidePointWithCoordinates","handleMoveChart","e","movementX","movementY","layerX","handleMoveChartToAnotherCanvas","totalCanvases","layerY","clientX","clearRect","ref","React","Component","App","state","setState","key","map","renderCanvas","handleAddNewChartButtonClick","renderCanvases","nextProps","prevState","connect","ChartReducer","toJS","dispatch","bindActionCreators","initialState","fromJS","newState","action","updateIn","arr","splice","store","createStore","combineReducers","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAEeA,kBAAM,CACnBC,YAAaC,SACbC,YAAaD,WCJFE,GCGEJ,gBAAM,CACnBK,MAAOC,SAAOC,WACdC,YAAaC,kBAAQC,KDLM,iBAChBC,EAA+B,+BAC/BC,EAAa,aACbC,EAAgB,gBEDtB,SAASC,EAAYC,GAC1B,MAAO,CACLC,KAAMZ,EACNa,QAASF,GAIN,SAASG,EAAyBC,EAAiBC,EAAeC,GACvE,MAAO,CACLL,KAAML,EACNM,QAAS,CAAEE,kBAAiBC,gBAAeC,eAIxC,SAASC,EAAUP,EAAWQ,EAAaF,GAChD,MAAO,CACLL,KAAMJ,EACNK,QAAS,CAAEF,YAAWQ,cAAaF,eAIhC,SAASG,IACd,MAAO,CACLR,KAAMH,G,qBCdH,SAASY,EAA0BC,GAAiB,IACzD,IAAMC,EAAM,IAAIC,IACZC,EAAiBH,EAFoC,mBAANI,EAAM,iCAANA,EAAM,kBAIzD,KAAOD,EAAiB,GAAG,CACzB,IAAME,EAAOC,IAAEC,OAAF,MAAAD,IAAYF,GAEpBH,EAAIO,IAAIH,KACXJ,EAAIQ,IAAIJ,GACRF,GAAkB,GAItB,OAAOO,MAAMC,KAAKV,GAGb,SAASW,EAAyBC,EAAUC,GAKjD,IALuE,IAAZC,EAAW,uDAAH,EAE7D1B,EAAY,CAAEV,MA3Bf,WAGL,IAFA,IACIA,EAAQ,IACHqC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BrC,GAHc,mBAGGsC,KAAKC,MAAsB,GAAhBD,KAAKV,WAEnC,OAAO5B,EAoBOwC,GACarC,YAAa,IAClCsC,EAAqBrB,EAA0BgB,EAAO,EAAGF,GAAUQ,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IACtFC,EAAqBzB,EAA0BgB,EAAO,EAAGD,GACtDE,EAAI,EAAGA,EAAID,EAAOC,GAAK,EAC9B3B,EAAUP,YAAY2C,KAAK,CAAElD,YAAa6C,EAAmBJ,GAAIvC,YAAa+C,EAAmBR,KAGnG,OAAO3B,E,UCxBMqC,EAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAU,SAASD,ICDlDE,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,KAAtB,OACb,4BAAQH,UAAU,oBAAoBI,QAASF,EAAmBxC,KAAK,UACpEyC,KASLF,EAAOI,aAAe,CACpBH,kBAAmB,cAGND,QCsCAK,E,WArDb,WAAYC,GAAS,oBACnBC,KAAKD,OAASA,EACdC,KAAKC,IAAMD,KAAKD,OAAOG,WAAW,M,uDAOzBC,GAAa,IAAD,OACrBA,EAAWC,QAAQ,SAAAnD,GACjB,EAAKgD,IAAII,YAAcpD,EAAUV,MACjC,EAAK+D,UAAUrD,EAAUP,aACzB,EAAK6D,SAAStD,EAAUP,YAAaO,EAAUV,W,+BAS1CG,EAAa8D,GAAY,IAAD,OAG/B9D,EAAY0D,QAAQ,SAAAK,GAClB,EAAKR,IAAIS,YACT,EAAKT,IAAIU,IAAIF,EAAWtE,YAAasE,EAAWpE,YAJnC,EAIwD,EAAG,EAAIwC,KAAK+B,IAAI,GACrF,EAAKX,IAAIY,UAAYL,EACrB,EAAKP,IAAIa,OACT,EAAKb,IAAIc,UAAY,EACrB,EAAKd,IAAII,YAAc,OACvB,EAAKJ,IAAIe,SACT,EAAKf,IAAIgB,gB,gCAQHvE,GAAc,IAAD,OACrBsD,KAAKC,IAAIc,UAAY,EACrBf,KAAKC,IAAIiB,OAAOxE,EAAY,GAAGP,YAAaO,EAAY,GAAGL,aAC3D2D,KAAKC,IAAIS,YACThE,EAAY0D,QAAQ,SAAAK,GAClB,EAAKR,IAAIkB,OAAOV,EAAWtE,YAAasE,EAAWpE,eAErD2D,KAAKC,IAAIe,SACThB,KAAKC,IAAIgB,gB,KC/CPG,E,2MACJrB,OAAS,K,EAETE,IAAM,K,EAENoB,UAAW,E,EAEXC,aAAe,K,EAEfnB,WAAa,G,EAEboB,eAAgB,E,mFAKdvB,KAAKwB,aACLxB,KAAKyB,OAAS,IAAI3B,EAAOE,KAAKD,U,2CAGV,IACZI,EAAeH,KAAK0B,MAApBvB,WACRH,KAAKG,WAAaA,EAClBH,KAAK2B,cACL3B,KAAKyB,OAAOG,WAAW5B,KAAKG,c,mCAI5BH,KAAKC,IAAMD,KAAKD,OAAOG,WAAW,MAClCF,KAAK6B,iBACL7B,KAAK8B,uB,uCAIL9B,KAAKD,OAAOgC,MAAQC,SAASC,gBAAgBC,YAC7ClC,KAAKD,OAAOoC,OAASH,SAASC,gBAAgBG,aAAe,EAAI,K,2CAG7C,IAAD,OACnBpC,KAAKD,OAAOsC,iBAAiB,YAAa,SAAAC,GACxC,EAAKjB,UAAW,EAChB,IAAK,IAAIkB,EAAkB,EAAGA,EAAkB,EAAKpC,WAAWvC,OAAQ2E,GAAmB,EACzF,IAAK,IAAI3D,EAAI,EAAGA,EAAI,EAAKuB,WAAWoC,GAAiB7F,YAAYkB,OAAQgB,GAAK,EAAG,CAC/E,IAAM4D,EAAQ,EAAKrC,WAAWoC,GAAiB7F,YAAYkC,GAC3D,GAAI,EAAK6D,uCAAuCH,EAAYE,GAAQ,CAClE,EAAKlB,aAAeiB,EACpB,UAMRvC,KAAKD,OAAOsC,iBAAiB,UAAW,WAAO,IAAD,EACC,EAAKX,MAA1CgB,EADoC,EACpCA,gBAAiBrF,EADmB,EACnBA,gBAErB,EAAKkE,eACPmB,EAAgB,EAAKvC,WAAW,EAAKmB,cAAejE,EAAiB,EAAKiE,cAG5E,EAAKD,UAAW,EAChB,EAAKE,eAAgB,EACrB,EAAKD,aAAe,OAGtBtB,KAAKD,OAAOsC,iBAAiB,YAAa,SAAAM,GACxC,GAAI,EAAKtB,UAAkC,OAAtB,EAAKC,aAAuB,CAC/C,IAAK,IAAI1C,EAAI,EAAGA,EAAI,EAAKuB,WAAW,EAAKmB,cAAc5E,YAAYkB,OAAQgB,GAAK,EAC9E,EAAKuB,WAAW,EAAKmB,cAAc5E,YAAYkC,GAAGzC,aAAewG,EAAEC,UACnE,EAAKzC,WAAW,EAAKmB,cAAc5E,YAAYkC,GAAGvC,aAAesG,EAAEE,UAErE,EAAKtB,eAAgB,EACrB,EAAKI,cACL,EAAKF,OAAOG,WAAW,EAAKzB,eAIhCH,KAAKD,OAAOsC,iBAAiB,aAAc,SAAAM,GACzC,GAAI,EAAKxC,WAAWvC,OAAS,GAAK,EAAKyD,UAAasB,EAAEG,OAAS,GAAKH,EAAEG,OAAS,EAAK/C,OAAOgC,MAAQ,CACjG,EAAKV,UAAW,EADiF,MAEL,EAAKK,MAAzFqB,EAFyF,EAEzFA,+BAAgC1F,EAFyD,EAEzDA,gBAAiB2F,EAFwC,EAExCA,cAAeN,EAFyB,EAEzBA,gBAElEpF,EAD6BqF,EAAEM,OAAS,EAAKlD,OAAOoC,OAAS,EAChB9E,EAAkB,EAAIA,EAAkB,EAE3F,GAAIC,EAAgB,GAAKA,EAAgB0F,EAAgB,EAKvD,YAJI,EAAKzB,eACPmB,EAAgB,EAAKvC,WAAW,EAAKmB,cAAejE,EAAiB,EAAKiE,eAM9EyB,EAA+B1F,EAAiBC,EAAe,EAAKgE,cACpE,EAAKG,OAAOG,WAAW,EAAKzB,YAC5B,EAAKoB,eAAgB,O,6DAKYe,EAAYE,GACjD,OACEF,EAAWY,SAAWV,EAAMrG,YAAc,GAC1CmG,EAAWY,SAAWV,EAAMrG,YAAc,GAC1CmG,EAAWW,QAAUT,EAAMnG,YAAc,GACzCiG,EAAWW,QAAUT,EAAMnG,YAAc,I,oCAK3C2D,KAAKC,IAAIkD,UAAU,EAAG,EAAGnD,KAAKD,OAAOgC,MAAO/B,KAAKD,OAAOoC,U,+BAGhD,IAAD,OACP,OACE,4BACEiB,IAAK,SAAArD,GACH,EAAKA,OAASA,S,GAnHHsD,IAAMC,WAkI3BlC,EAAOvB,aAAe,CACpBM,WAAY,GACZ6C,cAAe,GAGF5B,Q,sOC5HTmC,E,YAKJ,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRqB,+BAAiC,SAAC1F,EAAiBC,EAAeC,IAEhEH,EADqC,EAAKsE,MAAlCtE,0BACiBC,EAAiBC,EAAeC,IAzBxC,EA4BnBmF,gBAAkB,SAACzF,EAAWQ,EAAaF,IAEzCC,EADsB,EAAKkE,MAAnBlE,WACEP,EAAWQ,EAAaF,IA3BlC,EAAKiG,MAAQ,CACXrD,WAAY,IAJG,E,iFAQE,IAAD,EACmBH,KAAK0B,MAAlCvB,EADU,EACVA,WAAYzC,EADF,EACEA,aAEpBsC,KAAKgD,cAAgB7C,EAAWvC,OAChCoC,KAAKyD,SAAS,CAAEtD,eAChBH,KAAKtC,aAAeA,I,sDA4BpBV,EAPwBgD,KAAK0B,MAArB1E,aACUwB,EAChBwD,SAASC,gBAAgBC,YACzBF,SAASC,gBAAgBG,aAAe,EAAI,GAC5C,O,mCAMSjC,EAAY1C,GACvB,OACE,kBAAC,EAAD,CACEiG,IAAKjG,EACLJ,gBAAiBI,EACjBsF,+BAAgC/C,KAAK+C,+BACrCL,gBAAiB1C,KAAK0C,gBACtBvC,WAAYA,EACZ6C,cAAehD,KAAKgD,kB,qCAKX7C,GAAa,IAAD,OACzB,OAA0B,IAAtBA,EAAWvC,OACN,8BAGFuC,EAAWwD,IAAI,SAAC1G,EAAWQ,GAAZ,OAA4B,EAAKmG,aAAa3G,EAAWQ,O,+BAGvE,IAAD,OACC0C,EAAeH,KAAKwD,MAApBrD,WACR,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQT,kBAAmB,kBAAM,EAAKmE,gCAAgClE,KAAK,kBAC3E,kBAAC,EAAD,CAAQD,kBAAmBM,KAAKtC,aAAciC,KAAK,mBAEpDK,KAAK8D,eAAe3D,O,gDAzDK4D,EAAWC,GACzC,O,qVAAO,CAAP,GACKA,EADL,GAEKD,O,GAxBSV,IAAMC,WAsGxBC,EAAI1D,aAAe,CACjBM,WAAY,IAGC8D,kBAtBf,SAAyBT,GACvB,MAAO,CACLrD,WAAYqD,EAAMU,aAAaC,SAInC,SAA4BC,GAC1B,OAAOC,YAAmB,CAAErH,cAAaI,2BAA0BI,YAAWE,gBAAgB0G,IAejFH,CAGbV,G,QC1HIe,EAAeC,YAAO,CAAC,GAAI,KA2BlBL,EAzBM,WAAmC,IAElDM,EAFgBhB,EAAiC,uDAAzBc,EAAcG,EAAW,uCAC7CtH,EAAYsH,EAAZtH,QAER,OAAQsH,EAAOvH,MACb,KAAKZ,EACHkI,EAAWhB,EAAMkB,SAAS,CAAC,GAAI,SAAAC,GAAG,OAAIA,EAAItF,KAAKlC,KAC/C,MACF,KAAKN,EACH2H,EAAWhB,EACRkB,SAAS,CAACvH,EAAQG,eAAgB,SAAAqH,GAAG,OAAIA,EAAItF,KAAKmE,EAAMW,OAAOhH,EAAQE,iBAAiBF,EAAQI,eAChGmH,SAAS,CAACvH,EAAQE,iBAAkB,SAAAsH,GAAG,OAAIA,EAAIC,OAAOzH,EAAQI,WAAY,KAC7E,MACF,KAAKT,EACH0H,EAAWhB,EAAMkB,SAAS,CAACvH,EAAQM,YAAaN,EAAQI,YAAa,kBAAMJ,EAAQF,YACnF,MACF,KAAKF,EACHyH,EAAWD,YAAO,CAAC,GAAI,KACvB,MACF,QACE,OAAOf,EAGX,OAAOgB,GCxBMK,EAFDC,YAAYC,YAAgB,CAAEb,kBCSxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,MCLnCC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,OAEF7C,SAASuD,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f4d0669a.chunk.js","sourcesContent":["import { shape, number } from 'prop-types';\n\nexport default shape({\n  xCoordinate: number,\n  yCoordinate: number,\n});\n","export const ADD_NEW_CHART = 'add_new_chart';\nexport const MOVE_CHART_TO_ANOTHER_CANVAS = 'move_chart_to_another_canvas';\nexport const MOVE_CHART = 'move_chart';\nexport const REMOVE_CHARTS = 'remove_charts';\n","import { shape, string, arrayOf } from 'prop-types';\nimport coordinateType from './coordinateType';\n\nexport default shape({\n  color: string.isRequired,\n  coordinates: arrayOf(coordinateType),\n});\n","import { ADD_NEW_CHART, MOVE_CHART_TO_ANOTHER_CANVAS, MOVE_CHART, REMOVE_CHARTS } from '../constants/chart';\n\nexport function addNewChart(chartData) {\n  return {\n    type: ADD_NEW_CHART,\n    payload: chartData,\n  };\n}\n\nexport function moveChartToAnotherCanvas(fromCanvasIndex, toCanvasIndex, chartIndex) {\n  return {\n    type: MOVE_CHART_TO_ANOTHER_CANVAS,\n    payload: { fromCanvasIndex, toCanvasIndex, chartIndex },\n  };\n}\n\nexport function moveChart(chartData, canvasIndex, chartIndex) {\n  return {\n    type: MOVE_CHART,\n    payload: { chartData, canvasIndex, chartIndex },\n  };\n}\n\nexport function removeCharts() {\n  return {\n    type: REMOVE_CHARTS,\n  };\n}\n","import _ from 'lodash';\n\nexport function generateRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i += 1) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nexport function genetateUniqueCoordinates(length, ...args) {\n  const set = new Set();\n  let lengthRemained = length;\n\n  while (lengthRemained > 0) {\n    const rand = _.random(...args);\n\n    if (!set.has(rand)) {\n      set.add(rand);\n      lengthRemained -= 1;\n    }\n  }\n\n  return Array.from(set);\n}\n\nexport function generateChartDataInRange(xAxisMax, yAxisMax, count = 7) {\n  const color = generateRandomHexColor();\n  const chartData = { color, coordinates: [] };\n  const uniqueXCoordinates = genetateUniqueCoordinates(count, 0, xAxisMax).sort((a, b) => a - b);\n  const uniqueYCoordinates = genetateUniqueCoordinates(count, 0, yAxisMax);\n  for (let i = 0; i < count; i += 1) {\n    chartData.coordinates.push({ xCoordinate: uniqueXCoordinates[i], yCoordinate: uniqueYCoordinates[i] });\n  }\n\n  return chartData;\n}\n","import React from 'react';\n\nimport { node } from 'prop-types';\n\nimport './Panel.scss';\n\nconst panel = ({ children }) => <div className=\"panel\">{children}</div>;\n\npanel.propTypes = {\n  children: node.isRequired,\n};\n\nexport default panel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Button.scss';\n\nconst button = ({ handleButtonClick, text }) => (\n  <button className=\"add-new-chart-btn\" onClick={handleButtonClick} type=\"button\">\n    {text}\n  </button>\n);\n\nbutton.propTypes = {\n  handleButtonClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n};\n\nbutton.defaultProps = {\n  handleButtonClick: () => {},\n};\n\nexport default button;\n","class Drawer {\n  ctx;\n\n  canvas;\n\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  /**\n   * Draw Charts for given array of coordinates\n   * @param {array} chartsData\n   */\n  drawCharts(chartsData) {\n    chartsData.forEach(chartData => {\n      this.ctx.strokeStyle = chartData.color;\n      this.drawLines(chartData.coordinates);\n      this.drawDots(chartData.coordinates, chartData.color);\n    });\n  }\n\n  /**\n   * Draws dots for given array of coordinates\n   * @param {array} coordinates\n   * @param {string} fillColor\n   */\n  drawDots(coordinates, fillColor) {\n    const radius = 5;\n\n    coordinates.forEach(coordinate => {\n      this.ctx.beginPath();\n      this.ctx.arc(coordinate.xCoordinate, coordinate.yCoordinate, radius, 0, 2 * Math.PI, false);\n      this.ctx.fillStyle = fillColor;\n      this.ctx.fill();\n      this.ctx.lineWidth = 1;\n      this.ctx.strokeStyle = '#000';\n      this.ctx.stroke();\n      this.ctx.closePath();\n    });\n  }\n\n  /**\n   * Draw lines for given array of coordinates\n   * @param {array} coordinates\n   */\n  drawLines(coordinates) {\n    this.ctx.lineWidth = 3;\n    this.ctx.moveTo(coordinates[0].xCoordinate, coordinates[0].yCoordinate);\n    this.ctx.beginPath();\n    coordinates.forEach(coordinate => {\n      this.ctx.lineTo(coordinate.xCoordinate, coordinate.yCoordinate);\n    });\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n}\n\nexport default Drawer;\n","import React from 'react';\n\nimport { array, oneOfType, number, func } from 'prop-types';\nimport chartDataType from '../../types/chartDataType';\n\nimport Drawer from './Drawer';\n\nclass Canvas extends React.Component {\n  canvas = null;\n\n  ctx = null;\n\n  dragMode = false;\n\n  currentChart = null;\n\n  chartsData = [];\n\n  chartWasMoved = false;\n\n  drawer;\n\n  componentDidMount() {\n    this.initCanvas();\n    this.drawer = new Drawer(this.canvas);\n  }\n\n  componentDidUpdate() {\n    const { chartsData } = this.props;\n    this.chartsData = chartsData;\n    this.clearCanvas();\n    this.drawer.drawCharts(this.chartsData);\n  }\n\n  initCanvas() {\n    this.ctx = this.canvas.getContext('2d');\n    this.initDimensions();\n    this.initEventListeners();\n  }\n\n  initDimensions() {\n    this.canvas.width = document.documentElement.clientWidth;\n    this.canvas.height = document.documentElement.clientHeight / 2 - 35;\n  }\n\n  initEventListeners() {\n    this.canvas.addEventListener('mousedown', mouseEvent => {\n      this.dragMode = true;\n      for (let pointGroupIndex = 0; pointGroupIndex < this.chartsData.length; pointGroupIndex += 1) {\n        for (let i = 0; i < this.chartsData[pointGroupIndex].coordinates.length; i += 1) {\n          const point = this.chartsData[pointGroupIndex].coordinates[i];\n          if (this.checkIfMouseInsidePointWithCoordinates(mouseEvent, point)) {\n            this.currentChart = pointGroupIndex;\n            break;\n          }\n        }\n      }\n    });\n\n    this.canvas.addEventListener('mouseup', () => {\n      const { handleMoveChart, fromCanvasIndex } = this.props;\n\n      if (this.chartWasMoved) {\n        handleMoveChart(this.chartsData[this.currentChart], fromCanvasIndex, this.currentChart);\n      }\n\n      this.dragMode = false;\n      this.chartWasMoved = false;\n      this.currentChart = null;\n    });\n\n    this.canvas.addEventListener('mousemove', e => {\n      if (this.dragMode && this.currentChart !== null) {\n        for (let i = 0; i < this.chartsData[this.currentChart].coordinates.length; i += 1) {\n          this.chartsData[this.currentChart].coordinates[i].xCoordinate += e.movementX;\n          this.chartsData[this.currentChart].coordinates[i].yCoordinate += e.movementY;\n        }\n        this.chartWasMoved = true;\n        this.clearCanvas();\n        this.drawer.drawCharts(this.chartsData);\n      }\n    });\n\n    this.canvas.addEventListener('mouseleave', e => {\n      if (this.chartsData.length > 0 && this.dragMode && (e.layerX > 0 && e.layerX < this.canvas.width)) {\n        this.dragMode = false;\n        const { handleMoveChartToAnotherCanvas, fromCanvasIndex, totalCanvases, handleMoveChart } = this.props;\n        const mouseReachedBottomOfCanvas = e.layerY > this.canvas.height - 5;\n        const toCanvasIndex = mouseReachedBottomOfCanvas ? fromCanvasIndex + 1 : fromCanvasIndex - 1;\n\n        if (toCanvasIndex < 0 || toCanvasIndex > totalCanvases - 1) {\n          if (this.chartWasMoved) {\n            handleMoveChart(this.chartsData[this.currentChart], fromCanvasIndex, this.currentChart);\n          }\n\n          return;\n        }\n\n        handleMoveChartToAnotherCanvas(fromCanvasIndex, toCanvasIndex, this.currentChart);\n        this.drawer.drawCharts(this.chartsData);\n        this.chartWasMoved = false;\n      }\n    });\n  }\n\n  checkIfMouseInsidePointWithCoordinates(mouseEvent, point) {\n    return (\n      mouseEvent.clientX >= point.xCoordinate - 5 &&\n      mouseEvent.clientX <= point.xCoordinate + 5 &&\n      mouseEvent.layerY >= point.yCoordinate - 5 &&\n      mouseEvent.layerY <= point.yCoordinate + 5\n    );\n  }\n\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={canvas => {\n          this.canvas = canvas;\n        }}\n      />\n    );\n  }\n}\n\nCanvas.propTypes = {\n  handleMoveChartToAnotherCanvas: func.isRequired,\n  handleMoveChart: func.isRequired,\n  fromCanvasIndex: number.isRequired,\n  chartsData: oneOfType([chartDataType, array]),\n  totalCanvases: number,\n};\n\nCanvas.defaultProps = {\n  chartsData: [],\n  totalCanvases: 0,\n};\n\nexport default Canvas;\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { arrayOf, array, oneOfType, func } from 'prop-types';\nimport chartDataType from '../../types/chartDataType';\n\nimport { addNewChart, moveChartToAnotherCanvas, moveChart, removeCharts } from '../../store/actions/ChartActions';\n\nimport { generateChartDataInRange } from '../../core/utils';\n\nimport Panel from '../../components/Panel';\nimport Button from '../../components/Button';\nimport Canvas from '../../components/Canvas';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  totalCanvases;\n\n  removeCharts;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartsData: [],\n    };\n  }\n\n  componentDidMount() {\n    const { chartsData, removeCharts } = this.props;\n\n    this.totalCanvases = chartsData.length;\n    this.setState({ chartsData });\n    this.removeCharts = removeCharts;\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      ...prevState,\n      ...nextProps,\n    };\n  }\n\n  handleMoveChartToAnotherCanvas = (fromCanvasIndex, toCanvasIndex, chartIndex) => {\n    const { moveChartToAnotherCanvas } = this.props;\n    moveChartToAnotherCanvas(fromCanvasIndex, toCanvasIndex, chartIndex);\n  };\n\n  handleMoveChart = (chartData, canvasIndex, chartIndex) => {\n    const { moveChart } = this.props;\n    moveChart(chartData, canvasIndex, chartIndex);\n  };\n\n  handleAddNewChartButtonClick() {\n    const { addNewChart } = this.props;\n    const chartData = generateChartDataInRange(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight / 2 - 35,\n      10,\n    );\n\n    addNewChart(chartData);\n  }\n\n  renderCanvas(chartsData, canvasIndex) {\n    return (\n      <Canvas\n        key={canvasIndex}\n        fromCanvasIndex={canvasIndex}\n        handleMoveChartToAnotherCanvas={this.handleMoveChartToAnotherCanvas}\n        handleMoveChart={this.handleMoveChart}\n        chartsData={chartsData}\n        totalCanvases={this.totalCanvases}\n      />\n    );\n  }\n\n  renderCanvases(chartsData) {\n    if (chartsData.length === 0) {\n      return <div />;\n    }\n\n    return chartsData.map((chartData, canvasIndex) => this.renderCanvas(chartData, canvasIndex));\n  }\n\n  render() {\n    const { chartsData } = this.state;\n    return (\n      <div>\n        <Panel>\n          <Button handleButtonClick={() => this.handleAddNewChartButtonClick()} text=\"Add new chart\" />\n          <Button handleButtonClick={this.removeCharts} text=\"Remove charts\" />\n        </Panel>\n        {this.renderCanvases(chartsData)}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    chartsData: state.ChartReducer.toJS(),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ addNewChart, moveChartToAnotherCanvas, moveChart, removeCharts }, dispatch);\n}\n\nApp.propTypes = {\n  moveChartToAnotherCanvas: func.isRequired,\n  addNewChart: func.isRequired,\n  moveChart: func.isRequired,\n  removeCharts: func.isRequired,\n  chartsData: oneOfType([arrayOf(chartDataType), array]),\n};\n\nApp.defaultProps = {\n  chartsData: [],\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import { fromJS } from 'immutable';\n\nimport { ADD_NEW_CHART, MOVE_CHART_TO_ANOTHER_CANVAS, MOVE_CHART, REMOVE_CHARTS } from '../constants/chart';\n\n// 0 - first canvas charts, 1 - second canvas charts\nconst initialState = fromJS([[], []]);\n\nconst ChartReducer = (state = initialState, action) => {\n  const { payload } = action;\n  let newState;\n  switch (action.type) {\n    case ADD_NEW_CHART:\n      newState = state.updateIn([0], arr => arr.push(payload));\n      break;\n    case MOVE_CHART_TO_ANOTHER_CANVAS:\n      newState = state\n        .updateIn([payload.toCanvasIndex], arr => arr.push(state.toJS()[payload.fromCanvasIndex][payload.chartIndex]))\n        .updateIn([payload.fromCanvasIndex], arr => arr.splice(payload.chartIndex, 1));\n      break;\n    case MOVE_CHART:\n      newState = state.updateIn([payload.canvasIndex, payload.chartIndex], () => payload.chartData);\n      break;\n    case REMOVE_CHARTS:\n      newState = fromJS([[], []]);\n      break;\n    default:\n      return state;\n  }\n\n  return newState;\n};\n\nexport default ChartReducer;\n","import { createStore, combineReducers } from 'redux';\nimport ChartReducer from './reducers/ChartReducer';\n\nconst store = createStore(combineReducers({ ChartReducer }));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './containers/App';\n\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}